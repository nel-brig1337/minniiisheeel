char	**ft_heredoc(t_parser *prog)
{
	t_parser	*tmp;
	t_files		*f;
	t_heredoc	*hd;
	int			i;

	tmp = prog;
	hd = malloc(sizeof(t_heredoc));
	hd->save = malloc(sizeof(char *) * (list_counter(prog) + 1));
	hd->fd = -404;
	var->hd_sig = 0;
	i = 0;
	while (tmp)
	{
		f = tmp->files;
		if (f)
		{
			while (f)
			{
				if (f->type == DEL)
				{
					if (hd->fd != -404)
						unlink(heredoc_name(i));
					hd->fd = open(heredoc_name(i), O_WRONLY | O_TRUNC | O_CREAT, 0777);
					if (hd->fd == -1)
						exit(1);
					write_in_heredoc(hd, f->filename);
					//printf("fd = %d", hd->fd);
					close(hd->fd);
					if (var->hd_sig == -303)
					{
						//unlink(heredoc_name(i));
						break ;
					}
				}
				f = f->next;
			}
			hd->save[i] = heredoc_save(hd->fd, heredoc_name(i));
			hd->fd = -404;
		}	
		tmp = tmp->next;
		i++;
	}
	hd->save[i] = NULL;
	return (hd->save);
}


void	write_in_heredoc(t_heredoc *hd, char *filename)
{
	int	status;

	hd->pid = fork();
	signal(SIGINT, SIG_IGN);
	if (!hd->pid)
	{
		while (1)
		{			
			signal(SIGINT, SIG_DFL);
			hd->line = readline("> ");
			if (!hd->line)
				exit(1);
			if (!ft_strcmp(hd->line, filename))
				break ;
			write(hd->fd, hd->line, ft_strlen(hd->line));
			write(hd->fd, "\n", 1);
		}
	}
	waitpid(hd->pid, &status, 0);
	if (WIFSIGNALED(status))
	{
		//write (1, "\n", 1);
		var->hd_sig = -303;
	}
	signal(SIGINT, signal_handler);
}